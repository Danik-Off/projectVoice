const fs = require('fs-extra');
const path = require('path');

async function copyBackendFiles() {
    console.log('üìÅ –ö–æ–ø–∏—Ä—É–µ–º backend —Ñ–∞–π–ª—ã –≤ Electron...');
    
    const sourceDir = path.join(__dirname, 'backend');
    const targetDir = path.join(__dirname, 'electron', 'backend');
    
    try {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (await fs.pathExists(targetDir)) {
            await fs.remove(targetDir);
        }
        
        // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
        await fs.copy(sourceDir, targetDir, {
            filter: (src) => {
                // –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã
                return !src.includes('node_modules') && 
                       !src.includes('.git') && 
                       !src.includes('package-lock.json') &&
                       !src.includes('.env') && // –ù–µ –∫–æ–ø–∏—Ä—É–µ–º .env —Ñ–∞–π–ª—ã
                       !src.includes('logs') &&
                       !src.includes('uploads');
            }
        });
        
        console.log('‚úÖ Backend —Ñ–∞–π–ª—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ backend —Ñ–∞–π–ª–æ–≤:', error);
        throw error;
    }
}

async function copyFrontendBuild() {
    console.log('üìÅ –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–π frontend –≤ Electron...');
    
    const sourceDir = path.join(__dirname, 'frontend', 'build');
    const targetDir = path.join(__dirname, 'electron', 'frontend', 'build');
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ frontend —Å–æ–±—Ä–∞–Ω
        if (!await fs.pathExists(sourceDir)) {
            throw new Error('Frontend –Ω–µ —Å–æ–±—Ä–∞–Ω! –ó–∞–ø—É—Å—Ç–∏—Ç–µ "npm run build" –≤ –ø–∞–ø–∫–µ frontend');
        }
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (await fs.pathExists(targetDir)) {
            await fs.remove(targetDir);
        }
        
        // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
        await fs.copy(sourceDir, targetDir);
        
        console.log('‚úÖ Frontend —Ñ–∞–π–ª—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ frontend —Ñ–∞–π–ª–æ–≤:', error);
        throw error;
    }
}

async function updateElectronPackage() {
    console.log('üì¶ –û–±–Ω–æ–≤–ª—è–µ–º package.json Electron...');
    
    const electronPackagePath = path.join(__dirname, 'electron', 'package.json');
    
    try {
        // –ß–∏—Ç–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π package.json
        const originalPackage = await fs.readJson(path.join(__dirname, 'package.json'));
        
        // –ß–∏—Ç–∞–µ–º Electron package.json
        const electronPackage = await fs.readJson(electronPackagePath);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
        electronPackage.version = originalPackage.version;
        electronPackage.description = originalPackage.description;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π package.json
        await fs.writeJson(electronPackagePath, electronPackage, { spaces: 2 });
        
        console.log('‚úÖ Package.json –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ package.json:', error);
        throw error;
    }
}

async function main() {
    try {
        await copyBackendFiles();
        await copyFrontendBuild();
        await updateElectronPackage();
        
        console.log('üéâ Electron –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!');
        console.log('üìù –î–ª—è –∑–∞–ø—É—Å–∫–∞: cd electron && npm start');
        console.log('üîß –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: cd electron && npm run dev');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ Electron –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    main();
}

module.exports = { copyBackendFiles, copyFrontendBuild, updateElectronPackage };
