// src/components/ChannelSidebar/ServerHeader.tsx
import React, { useState } from 'react';
import { observer } from 'mobx-react-lite';
import { useNavigate } from 'react-router-dom';
import './ServerHeader.scss';
import serverStore from '../../../../../../store/serverStore';
import { authStore } from '../../../../../../store/authStore';
import PencilIcon from '../../../../../../icons/PencilIcon';

const ServerHeader: React.FC = observer(() => {
    const currentServer = serverStore.currentServer;
    const navigate = useNavigate();
    const [showInviteModal, setShowInviteModal] = useState(false);
    const [inviteLink, setInviteLink] = useState('');
    const [isCreatingInvite, setIsCreatingInvite] = useState(false);
    const [showDropdown, setShowDropdown] = useState(false);

    const handleShare = async () => {
        if (!currentServer) return;
        
        setIsCreatingInvite(true);
        try {
            const response = await fetch(`/api/invites`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${authStore.getToken()}`
                },
                body: JSON.stringify({ serverId: currentServer.id })
            });
            
            if (response.ok) {
                const invite = await response.json();
                setInviteLink(`${window.location.origin}/invite/${invite.token}`);
                setShowInviteModal(true);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', error);
        } finally {
            setIsCreatingInvite(false);
        }
    };

    const handleEditServer = () => {
        if (currentServer) {
            navigate(`/server/${currentServer.id}/settings`);
        }
        setShowDropdown(false);
    };

    const copyInviteLink = async () => {
        try {
            await navigator.clipboard.writeText(inviteLink);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
        }
    };

    const closeInviteModal = () => {
        setShowInviteModal(false);
        setInviteLink('');
    };

    const toggleDropdown = () => {
        setShowDropdown(!showDropdown);
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    const currentUserId = authStore.user?.id;
    const isOwner = currentServer?.ownerId === currentUserId;
    const userMember = currentServer?.members?.find(
        (member: any) => member.userId === currentUserId
    );
    const userRole = userMember?.role || (isOwner ? 'owner' : 'member');

    const canInvite = ['owner', 'admin', 'moderator'].includes(userRole);
    const canEditServer = ['owner', 'admin'].includes(userRole);

    const getRoleIcon = (role: string) => {
        switch (role) {
            case 'owner': return 'üëë';
            case 'admin': return 'üõ°Ô∏è';
            case 'moderator': return '‚ö°';
            default: return 'üë§';
        }
    };

    if (!currentServer) {
        return (
            <div className="server-header">
                <div className="no-server-state">
                    <span className="no-server-text">–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä</span>
                </div>
            </div>
        );
    }

    return (
        <>
            <div className="server-header">
                <div className="server-info">
                    <div className="server-icon">
                        {currentServer.icon ? (
                            <img 
                                src={currentServer.icon} 
                                alt={`${currentServer.name} icon`} 
                            />
                        ) : (
                            <span>{currentServer.name.charAt(0).toUpperCase()}</span>
                        )}
                    </div>
                    
                    <div className="server-details">
                        <h2 className="server-name">{currentServer.name}</h2>
                        <div className="server-meta">
                            <span className="server-role">
                                {getRoleIcon(userRole)} {userRole}
                            </span>
                            {currentServer.members && (
                                <span className="member-count">
                                    {currentServer.members.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                                </span>
                            )}
                        </div>
                    </div>
                </div>

                <div className="server-actions">

                    
                    {(canEditServer || canInvite) && (
                        <div className="dropdown-container">
                            <button 
                                className="action-button menu-button"
                                onClick={toggleDropdown}
                                title="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è"
                            >
                                ‚ãØ
                            </button>
                            
                            {showDropdown && (
                                <div className="dropdown-menu">
                                    {canInvite && (
                                        <button 
                                            className="dropdown-item"
                                            onClick={handleShare}
                                            disabled={isCreatingInvite}
                                        >
                                            <span className="dropdown-icon">üì§</span>
                                            –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                                        </button>
                                    )}
                                    
                                    {canEditServer && (
                                        <button 
                                            className="dropdown-item"
                                            onClick={handleEditServer}
                                        >
                                            <span className="dropdown-icon">‚öôÔ∏è</span>
                                            –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
                                        </button>
                                    )}
                                    
                                    <button 
                                        className="dropdown-item"
                                        onClick={() => setShowDropdown(false)}
                                    >
                                        <span className="dropdown-icon">‚ùå</span>
                                        –ó–∞–∫—Ä—ã—Ç—å
                                    </button>
                                </div>
                            )}
                        </div>
                    )}
                </div>
            </div>

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º */}
            {showInviteModal && (
                <div className="invite-modal-overlay" onClick={closeInviteModal}>
                    <div className="invite-modal" onClick={(e) => e.stopPropagation()}>
                        <div className="modal-header">
                            <h3>–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä</h3>
                            <button className="modal-close" onClick={closeInviteModal}>√ó</button>
                        </div>
                        
                        <div className="modal-content">
                            <div className="server-preview">
                                <div className="server-preview-icon">
                                    {currentServer.icon ? (
                                        <img src={currentServer.icon} alt="Server icon" />
                                    ) : (
                                        <span>{currentServer.name.charAt(0).toUpperCase()}</span>
                                    )}
                                </div>
                                <div className="server-preview-info">
                                    <h4>{currentServer.name}</h4>
                                    <p>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ Discord-–ø–æ–¥–æ–±–Ω—ã–π —Å–µ—Ä–≤–µ—Ä</p>
                                </div>
                            </div>
                            
                            <div className="invite-section">
                                <label>–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:</label>
                                <div className="invite-link-container">
                                    <input 
                                        type="text" 
                                        value={inviteLink} 
                                        readOnly 
                                        className="invite-link-input"
                                        placeholder="–°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏..."
                                    />
                                    <button onClick={copyInviteLink} className="copy-button">
                                        <span className="copy-icon">üìã</span>
                                        –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                                    </button>
                                </div>
                            </div>
                            
                            <div className="modal-footer">
                                <button onClick={closeInviteModal} className="close-button">
                                    –ì–æ—Ç–æ–≤–æ
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            )}
        </>
    );
});

export default ServerHeader;
