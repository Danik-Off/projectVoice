import React, { useState, useEffect, useCallback } from 'react';
import { observer } from 'mobx-react';
import { adminService } from '../../services/adminService';
import { authStore } from '../../store/authStore';
import { useTranslation } from 'react-i18next';
import './AdminPanel.scss';

interface Stats {
    users: {
        total: number;
        active: number;
        blocked: number;
        byRole: {
            admin: number;
            moderator: number;
            user: number;
        };
    };
    servers: {
        total: number;
        withChannels: number;
    };
    channels: {
        total: number;
        text: number;
        voice: number;
    };
    messages: {
        total: number;
        today: number;
    };
}

interface User {
    id: number;
    username: string;
    email: string;
    role: string;
    isActive: boolean;
    createdAt: string;
    lastLogin?: string;
}

interface Server {
    id: number;
    name: string;
    description?: string;
    ownerId: number;
    createdAt: string;
    channels?: any[];
    memberCount?: number;
}

const AdminPanel: React.FC = observer(() => {
    const { t } = useTranslation();
    const [stats, setStats] = useState<Stats | null>(null);
    const [loading, setLoading] = useState(true);
    const [activeTab, setActiveTab] = useState('dashboard');
    const [users, setUsers] = useState<User[]>([]);
    const [servers, setServers] = useState<Server[]>([]);
    const [currentPage, setCurrentPage] = useState(1);
    const [totalPages, setTotalPages] = useState(1);
    const [searchTerm, setSearchTerm] = useState('');
    const [roleFilter, setRoleFilter] = useState('');
    const [statusFilter, setStatusFilter] = useState('');
    const [logs, setLogs] = useState<any>(null);

    const loadStats = useCallback(async () => {
        try {
            setLoading(true);
            const data = await adminService.getStats();
            setStats(data);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        } finally {
            setLoading(false);
        }
    }, []);

    const loadUsers = useCallback(async () => {
        try {
            const response = await adminService.getUsers({
                page: currentPage,
                search: searchTerm,
                role: roleFilter,
                status: statusFilter
            });
            setUsers(response.users);
            setTotalPages(response.totalPages || 1);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        }
    }, [currentPage, searchTerm, roleFilter, statusFilter]);

    const loadServers = useCallback(async () => {
        try {
            const response = await adminService.getServers();
            setServers(response.servers);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤:', error);
        }
    }, []);

    const loadLogs = useCallback(async () => {
        try {
            const response = await adminService.getLogs();
            setLogs(response);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤:', error);
        }
    }, []);

    useEffect(() => {
        if (authStore.user?.role !== 'admin') {
            window.location.href = '/';
            return;
        }

        loadStats();
    }, [loadStats]);

    useEffect(() => {
        if (activeTab === 'users') {
            loadUsers();
        } else if (activeTab === 'servers') {
            loadServers();
        } else if (activeTab === 'logs') {
            loadLogs();
        }
    }, [activeTab, loadUsers, loadServers, loadLogs]);

    const updateUser = async (userId: number, updates: any) => {
        try {
            await adminService.updateUser(userId, updates);
            loadUsers(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        }
    };

    const deleteUser = async (userId: number) => {
        if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?')) {
            try {
                await adminService.deleteUser(userId);
                loadUsers(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            }
        }
    };

    const deleteServer = async (serverId: number) => {
        if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Å–µ—Ä–≤–µ—Ä?')) {
            try {
                await adminService.deleteServer(serverId);
                loadServers(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞:', error);
            }
        }
    };

    const getRoleBadge = (role: string) => {
        const roleColors = {
            admin: 'linear-gradient(135deg, #e74c3c 0%, #c0392b 100%)',
            moderator: 'linear-gradient(135deg, #f39c12 0%, #e67e22 100%)',
            user: 'linear-gradient(135deg, var(--accent-color) 0%, var(--button-bg) 100%)'
        };

        return (
            <span 
                className="role-badge"
                style={{ background: roleColors[role as keyof typeof roleColors] }}
            >
                {role}
            </span>
        );
    };

    const getStatusBadge = (isActive: boolean) => {
        return (
            <span 
                className={`status-badge ${isActive ? 'active' : 'blocked'}`}
                style={{
                    background: isActive 
                        ? 'linear-gradient(135deg, #27ae60 0%, #2ecc71 100%)'
                        : 'linear-gradient(135deg, #e74c3c 0%, #c0392b 100%)'
                }}
            >
                {isActive ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}
            </span>
        );
    };

    if (loading) {
        return (
            <div className="admin-panel">
                <div className="admin-loading">
                    <div className="loading-spinner"></div>
                    –ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏...
                </div>
            </div>
        );
    }

    return (
        <div className="admin-panel">
            <div className="admin-header">
                <h1>üöÄ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ProjectVoice</h1>
                <div className="admin-user-info">
                    <span>üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {authStore.user?.username}</span>
                    <button onClick={() => authStore.logout()} className="logout-btn">
                        üö™ –í—ã–π—Ç–∏
                    </button>
                </div>
            </div>

            <div className="admin-nav">
                <button 
                    className={activeTab === 'dashboard' ? 'active' : ''}
                    onClick={() => setActiveTab('dashboard')}
                >
                    üìä –î–∞—à–±–æ—Ä–¥
                </button>
                <button 
                    className={activeTab === 'users' ? 'active' : ''}
                    onClick={() => setActiveTab('users')}
                >
                    üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
                </button>
                <button 
                    className={activeTab === 'servers' ? 'active' : ''}
                    onClick={() => setActiveTab('servers')}
                >
                    üè† –°–µ—Ä–≤–µ—Ä—ã
                </button>
                <button 
                    className={activeTab === 'logs' ? 'active' : ''}
                    onClick={() => setActiveTab('logs')}
                >
                    üìù –õ–æ–≥–∏
                </button>
            </div>

            <div className="admin-content">
                {activeTab === 'dashboard' && (
                    <div className="dashboard">
                        <div className="stats-grid">
                            <div className="stat-card">
                                <h3>üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</h3>
                                <div className="stat-numbers">
                                    <div className="stat-main">{stats?.users.total || 0}</div>
                                    <div className="stat-details">
                                        <span>‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats?.users.active || 0}</span>
                                        <span>‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {stats?.users.blocked || 0}</span>
                                    </div>
                                </div>
                                <div className="stat-breakdown">
                                    <div>üëë –ê–¥–º–∏–Ω–æ–≤: {stats?.users.byRole.admin || 0}</div>
                                    <div>üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: {stats?.users.byRole.moderator || 0}</div>
                                    <div>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats?.users.byRole.user || 0}</div>
                                </div>
                            </div>

                            <div className="stat-card">
                                <h3>üè† –°–µ—Ä–≤–µ—Ä—ã</h3>
                                <div className="stat-numbers">
                                    <div className="stat-main">{stats?.servers.total || 0}</div>
                                    <div className="stat-details">
                                        <span>üì¢ –° –∫–∞–Ω–∞–ª–∞–º–∏: {stats?.servers.withChannels || 0}</span>
                                    </div>
                                </div>
                            </div>

                            <div className="stat-card">
                                <h3>üì¢ –ö–∞–Ω–∞–ª—ã</h3>
                                <div className="stat-numbers">
                                    <div className="stat-main">{stats?.channels.total || 0}</div>
                                    <div className="stat-details">
                                        <span>üí¨ –¢–µ–∫—Å—Ç–æ–≤—ã—Ö: {stats?.channels.text || 0}</span>
                                        <span>üé§ –ì–æ–ª–æ—Å–æ–≤—ã—Ö: {stats?.channels.voice || 0}</span>
                                    </div>
                                </div>
                            </div>

                            <div className="stat-card">
                                <h3>üí¨ –°–æ–æ–±—â–µ–Ω–∏—è</h3>
                                <div className="stat-numbers">
                                    <div className="stat-main">{stats?.messages.total || 0}</div>
                                    <div className="stat-details">
                                        <span>üìÖ –°–µ–≥–æ–¥–Ω—è: {stats?.messages.today || 0}</span>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div className="quick-actions">
                            <h3>‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h3>
                            <div className="action-buttons">
                                <button onClick={() => setActiveTab('users')}>
                                    üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
                                </button>
                                <button onClick={() => setActiveTab('servers')}>
                                    üè† –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–µ—Ä–≤–µ—Ä–æ–≤
                                </button>
                                <button onClick={loadStats}>
                                    üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                                </button>
                            </div>
                        </div>
                    </div>
                )}

                {activeTab === 'users' && (
                    <div className="users-management">
                        <h2>üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</h2>
                        <UsersManagement 
                            users={users}
                            currentPage={currentPage}
                            totalPages={totalPages}
                            searchTerm={searchTerm}
                            roleFilter={roleFilter}
                            statusFilter={statusFilter}
                            onSearchChange={setSearchTerm}
                            onRoleFilterChange={setRoleFilter}
                            onStatusFilterChange={setStatusFilter}
                            onPageChange={setCurrentPage}
                            onUpdateUser={updateUser}
                            onDeleteUser={deleteUser}
                            getRoleBadge={getRoleBadge}
                            getStatusBadge={getStatusBadge}
                        />
                    </div>
                )}

                {activeTab === 'servers' && (
                    <div className="servers-management">
                        <h2>üè† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏</h2>
                        <ServersManagement 
                            servers={servers}
                            onDeleteServer={deleteServer}
                        />
                    </div>
                )}

                {activeTab === 'logs' && (
                    <div className="logs-viewer">
                        <h2>üìù –°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏</h2>
                        <LogsViewer logs={logs} />
                    </div>
                )}
            </div>
        </div>
    );
});

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
const UsersManagement: React.FC<{
    users: User[];
    currentPage: number;
    totalPages: number;
    searchTerm: string;
    roleFilter: string;
    statusFilter: string;
    onSearchChange: (value: string) => void;
    onRoleFilterChange: (value: string) => void;
    onStatusFilterChange: (value: string) => void;
    onPageChange: (page: number) => void;
    onUpdateUser: (userId: number, updates: any) => void;
    onDeleteUser: (userId: number) => void;
    getRoleBadge: (role: string) => JSX.Element;
    getStatusBadge: (isActive: boolean) => JSX.Element;
}> = ({ 
    users, 
    currentPage, 
    totalPages, 
    searchTerm, 
    roleFilter, 
    statusFilter,
    onSearchChange,
    onRoleFilterChange,
    onStatusFilterChange,
    onPageChange,
    onUpdateUser,
    onDeleteUser,
    getRoleBadge,
    getStatusBadge
}) => {
    return (
        <>
            <div className="filters">
                <input
                    type="text"
                    placeholder="–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ email..."
                    value={searchTerm}
                    onChange={(e) => onSearchChange(e.target.value)}
                />
                <select value={roleFilter} onChange={(e) => onRoleFilterChange(e.target.value)}>
                    <option value="">–í—Å–µ —Ä–æ–ª–∏</option>
                    <option value="admin">–ê–¥–º–∏–Ω</option>
                    <option value="moderator">–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä</option>
                    <option value="user">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</option>
                </select>
                <select value={statusFilter} onChange={(e) => onStatusFilterChange(e.target.value)}>
                    <option value="">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
                    <option value="active">–ê–∫—Ç–∏–≤–Ω—ã–µ</option>
                    <option value="blocked">–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ</option>
                </select>
            </div>

            <div className="table-container">
                <table>
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</th>
                            <th>Email</th>
                            <th>–†–æ–ª—å</th>
                            <th>–°—Ç–∞—Ç—É—Å</th>
                            <th>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</th>
                            <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                        </tr>
                    </thead>
                    <tbody>
                        {users.map((user) => (
                            <tr key={user.id}>
                                <td>{user.id}</td>
                                <td>{user.username}</td>
                                <td>{user.email}</td>
                                <td>{getRoleBadge(user.role)}</td>
                                <td>{getStatusBadge(user.isActive)}</td>
                                <td>{new Date(user.createdAt).toLocaleDateString()}</td>
                                <td>
                                    <select
                                        value={user.role}
                                        onChange={(e) => onUpdateUser(user.id, { role: e.target.value })}
                                    >
                                        <option value="user">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</option>
                                        <option value="moderator">–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä</option>
                                        <option value="admin">–ê–¥–º–∏–Ω</option>
                                    </select>
                                    <button
                                        onClick={() => onUpdateUser(user.id, { isActive: !user.isActive })}
                                        className={`status-toggle ${user.isActive ? 'block' : 'unblock'}`}
                                    >
                                        {user.isActive ? 'üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å' : '‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å'}
                                    </button>
                                    <button
                                        onClick={() => onDeleteUser(user.id)}
                                        className="delete-btn"
                                    >
                                        üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                                    </button>
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </div>

            <div className="pagination">
                <button 
                    onClick={() => onPageChange(currentPage - 1)}
                    disabled={currentPage === 1}
                >
                    ‚Üê –ü—Ä–µ–¥—ã–¥—É—â–∞—è
                </button>
                <span>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {currentPage} –∏–∑ {totalPages}</span>
                <button 
                    onClick={() => onPageChange(currentPage + 1)}
                    disabled={currentPage === totalPages}
                >
                    –°–ª–µ–¥—É—é—â–∞—è ‚Üí
                </button>
            </div>
        </>
    );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞–º–∏
const ServersManagement: React.FC<{
    servers: Server[];
    onDeleteServer: (serverId: number) => void;
}> = ({ servers, onDeleteServer }) => {
    return (
        <div className="table-container">
            <table>
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                        <th>–û–ø–∏—Å–∞–Ω–∏–µ</th>
                        <th>–í–ª–∞–¥–µ–ª–µ—Ü</th>
                        <th>–ö–∞–Ω–∞–ª–æ–≤</th>
                        <th>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤</th>
                        <th>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è</th>
                        <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                    </tr>
                </thead>
                <tbody>
                    {servers.map((server) => (
                        <tr key={server.id}>
                            <td>{server.id}</td>
                            <td>{server.name}</td>
                            <td>{server.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}</td>
                            <td>{server.ownerId}</td>
                            <td>{server.channels?.length || 0}</td>
                            <td>{server.memberCount || 0}</td>
                            <td>{new Date(server.createdAt).toLocaleDateString()}</td>
                            <td>
                                <button
                                    onClick={() => onDeleteServer(server.id)}
                                    className="delete-btn"
                                >
                                    üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                                </button>
                            </td>
                        </tr>
                    ))}
                </tbody>
            </table>
        </div>
    );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤
const LogsViewer: React.FC<{ logs: any }> = ({ logs }) => {
    if (!logs) return <div>–ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤...</div>;

    return (
        <div className="logs-content">
            <div className="log-section">
                <h3>üîß –°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏</h3>
                <pre>{logs.system || '–ù–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤'}</pre>
            </div>
            <div className="log-section">
                <h3>‚ùå –û—à–∏–±–∫–∏</h3>
                <pre>{logs.errors || '–ù–µ—Ç –æ—à–∏–±–æ–∫'}</pre>
            </div>
            <div className="log-section">
                <h3>üìä –õ–æ–≥–∏ –¥–æ—Å—Ç—É–ø–∞</h3>
                <pre>{logs.access || '–ù–µ—Ç –ª–æ–≥–æ–≤ –¥–æ—Å—Ç—É–ø–∞'}</pre>
            </div>
        </div>
    );
};

export default AdminPanel; 