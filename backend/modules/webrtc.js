const rooms = {}; // { roomId: [{ token: string, micToggle: boolean, socketId: string }] }

module.exports = (io) => {
    io.on('connection', (socket) => {
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–µ–Ω: ', socket.id);

        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ
        socket.on('join-room', (roomId, token) => {
            console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${socket.id} –ø—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);

            if (!rooms[roomId]) {
                rooms[roomId] = [];
                console.log(`–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞: ${roomId}`);
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–Ω–∞—Ç—É —Å –Ω–∞—á–∞–ª—å–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º micToggle –∏ socketId
            rooms[roomId].push({ token, micToggle: true, socketId: socket.id });
            socket.join(roomId);
            console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${socket.id} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥–∫–ª—é—á–∏–≤—à–µ–º—É—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–Ω–∞—Ç—ã
            const participants = rooms[roomId].map((user) => ({
                token: user.token,
                micToggle: user.micToggle,
                socketId: user.socketId,
            }));
            socket.emit('created', { roomId, participants });
            console.log(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–Ω–∞—Ç—ã ${roomId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${socket.id}`);

            // –°–æ–æ–±—â–∞–µ–º –≤—Å–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º –≤ –∫–æ–º–Ω–∞—Ç–µ, —á—Ç–æ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è
            socket.to(roomId).emit('user-connected', { socketId: socket.id });

            console.log(
                `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Å—Ç–∞–ª—å–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId} –æ —Ç–æ–º, —á—Ç–æ ${socket.id} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è`
            );
            console.log(rooms[roomId]);

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
            socket.on('disconnect', () => {
                console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${token} –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç –∫–æ–º–Ω–∞—Ç—ã ${roomId}`);
                try {
                    rooms[roomId] = rooms[roomId].filter((user) => user.socketId !== socket.id);
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–º–Ω–∞—Ç—ã:', error);
                }
                console.log(rooms[roomId]);

                socket.to(roomId).emit('user-disconnected', socket.id);
                console.log(
                    `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Å—Ç–∞–ª—å–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId} –æ —Ç–æ–º, —á—Ç–æ ${socket.id} –æ—Ç–∫–ª—é—á–∏–ª—Å—è`
                );

                // –£–¥–∞–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É, –µ—Å–ª–∏ –æ–Ω–∞ –ø—É—Å—Ç–∞
                if (rooms[roomId] && rooms[roomId].length === 0) {
                    delete rooms[roomId];
                    console.log(`–ö–æ–º–Ω–∞—Ç–∞ ${roomId} —É–¥–∞–ª–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –ø—É—Å—Ç–∞.`);
                }
            });
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ WebRTC
        socket.on('signal', (data) => {
            const { to, type, ...payload } = data;
            console.log('üöÄ ~ socket.on ~ data:', data);

            // –ò—â–µ–º socketId –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª
            if(to==socket.id){
                console.log("—Å–∞–º–æ–º—É —Å–µ–±–µ –Ω–µ –Ω–∞–¥–æ");
                return;
            }
            console.log("aaaaaaaaa")
            if (to) {
                io.to(to).emit('signal', { from: socket.id, type,...payload});
                console.log(`–°–∏–≥–Ω–∞–ª –æ—Ç ${socket.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å socketId ${to}`);
                console.log(data);
            } else {
                console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å  ${to} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–º–Ω–∞—Ç–∞—Ö`);
            }
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
        socket.on('toggle-mic', (roomId, token) => {
            const user = rooms[roomId]?.find((user) => user.socketId === socket.id);
            if (user) {
                user.micToggle = !user.micToggle;
                console.log(
                    `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${socket.id} –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId} –ø–µ—Ä–µ–∫–ª—é—á–∏–ª –º–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–∞ ${
                        user.micToggle ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω'
                    }`
                );
                // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
                socket.to(roomId).emit('mic-toggled', { token, micToggle: user.micToggle });
            }
        });
    });
};
