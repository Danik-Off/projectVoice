// src/components/ChannelSidebar/ServerHeader.tsx
import React, { useState, useRef, useEffect } from 'react';
import { observer } from 'mobx-react-lite';
import { useNavigate } from 'react-router-dom';
import './ServerHeader.scss';
import serverStore from '../../../../../../store/serverStore';
import { authStore } from '../../../../../../store/authStore';

const ServerHeader: React.FC = observer(() => {
    const currentServer = serverStore.currentServer;
    const navigate = useNavigate();
    const [showInviteModal, setShowInviteModal] = useState(false);
    const [inviteLink, setInviteLink] = useState('');
    const [isCreatingInvite, setIsCreatingInvite] = useState(false);
    const [showDropdown, setShowDropdown] = useState(false);
    const [showTooltip, setShowTooltip] = useState(false);
    const dropdownRef = useRef<HTMLDivElement>(null);
    const tooltipRef = useRef<HTMLDivElement>(null);

    // –ó–∞–∫—Ä—ã—Ç–∏–µ dropdown –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
    useEffect(() => {
        const handleClickOutside = (event: MouseEvent) => {
            if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
                setShowDropdown(false);
            }
        };

        document.addEventListener('mousedown', handleClickOutside);
        return () => document.removeEventListener('mousedown', handleClickOutside);
    }, []);

    // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ tooltip
    useEffect(() => {
        if (showTooltip && tooltipRef.current) {
            const rect = tooltipRef.current.getBoundingClientRect();
            if (rect.right > window.innerWidth - 20) {
                tooltipRef.current.style.right = '0';
                tooltipRef.current.style.left = 'auto';
            }
        }
    }, [showTooltip]);

    const handleShare = async () => {
        if (!currentServer) return;
        
        setIsCreatingInvite(true);
        try {
            const response = await fetch(`/api/invites`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${authStore.getToken()}`
                },
                body: JSON.stringify({ serverId: currentServer.id })
            });
            
            if (response.ok) {
                const invite = await response.json();
                setInviteLink(`${window.location.origin}/invite/${invite.token}`);
                setShowInviteModal(true);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', error);
        } finally {
            setIsCreatingInvite(false);
        }
        setShowDropdown(false);
    };

    const handleEditServer = () => {
        if (currentServer) {
            navigate(`/server/${currentServer.id}/settings`);
        }
        setShowDropdown(false);
    };

    const copyInviteLink = async () => {
        try {
            await navigator.clipboard.writeText(inviteLink);
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏
            setShowTooltip(true);
            setTimeout(() => setShowTooltip(false), 2000);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
        }
    };

    const closeInviteModal = () => {
        setShowInviteModal(false);
        setInviteLink('');
    };

    const toggleDropdown = () => {
        setShowDropdown(!showDropdown);
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    const currentUserId = authStore.user?.id;
    const isOwner = currentServer?.ownerId === currentUserId;
    const userMember = currentServer?.members?.find(
        (member: any) => member.userId === currentUserId
    );
    const userRole = userMember?.role || (isOwner ? 'owner' : 'member');

    const canInvite = ['owner', 'admin', 'moderator'].includes(userRole);
    const canEditServer = ['owner', 'admin'].includes(userRole);

    const getRoleIcon = (role: string) => {
        switch (role) {
            case 'owner': return 'üëë';
            case 'admin': return 'üõ°Ô∏è';
            case 'moderator': return '‚ö°';
            default: return 'üë§';
        }
    };

    const getRoleColor = (role: string) => {
        switch (role) {
            case 'owner': return '#ffd700';
            case 'admin': return '#ff6b6b';
            case 'moderator': return '#4ecdc4';
            default: return '#95a5a6';
        }
    };

    if (!currentServer) {
        return (
            <div className="server-header">
                <div className="no-server-state">
                    <div className="no-server-icon">üè†</div>
                    <span className="no-server-text">–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä</span>
                </div>
            </div>
        );
    }

    return (
        <>
            <div className="server-header">
                <div className="server-info">
                    <div className="server-icon-container">
                        <div className="server-icon">
                            {currentServer.icon ? (
                                <img 
                                    src={currentServer.icon} 
                                    alt={`${currentServer.name} icon`} 
                                />
                            ) : (
                                <span className="server-icon-text">
                                    {currentServer.name.charAt(0).toUpperCase()}
                                </span>
                            )}
                        </div>
                        <div className="server-status-indicator online"></div>
                    </div>
                    
                    <div className="server-details">
                        <h2 className="server-name" title={currentServer.name}>
                            {currentServer.name}
                        </h2>
                        <div className="server-meta">
                            <div 
                                className="server-role"
                                style={{ '--role-color': getRoleColor(userRole) } as React.CSSProperties}
                            >
                                <span className="role-icon">{getRoleIcon(userRole)}</span>
                                <span className="role-text">{userRole}</span>
                            </div>
                            {currentServer.members && (
                                <div className="member-count">
                                    <span className="member-icon">üë•</span>
                                    <span className="member-text">{currentServer.members.length}</span>
                                </div>
                            )}
                        </div>
                    </div>
                </div>

                <div className="server-actions">
                    {canInvite && (
                        <button 
                            className="action-button share-button"
                            onClick={handleShare}
                            disabled={isCreatingInvite}
                            title="–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
                        >
                            {isCreatingInvite ? (
                                <div className="loading-spinner"></div>
                            ) : (
                                <span className="share-icon">üì§</span>
                            )}
                        </button>
                    )}
                    
                    {(canEditServer || canInvite) && (
                        <div className="dropdown-container" ref={dropdownRef}>
                            <button 
                                className={`action-button menu-button ${showDropdown ? 'active' : ''}`}
                                onClick={toggleDropdown}
                                title="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è"
                            >
                                <span className="menu-icon">‚ãØ</span>
                            </button>
                            
                            {showDropdown && (
                                <div className="dropdown-menu">
                                    <div className="dropdown-header">
                                        <span className="dropdown-title">–î–µ–π—Å—Ç–≤–∏—è —Å–µ—Ä–≤–µ—Ä–∞</span>
                                    </div>
                                    
                                    {canInvite && (
                                        <button 
                                            className="dropdown-item"
                                            onClick={handleShare}
                                            disabled={isCreatingInvite}
                                        >
                                            <span className="dropdown-icon">üì§</span>
                                            <span className="dropdown-text">–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</span>
                                        </button>
                                    )}
                                    
                                    {canEditServer && (
                                        <button 
                                            className="dropdown-item"
                                            onClick={handleEditServer}
                                        >
                                            <span className="dropdown-icon">‚öôÔ∏è</span>
                                            <span className="dropdown-text">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞</span>
                                        </button>
                                    )}
                                    
                                    <div className="dropdown-divider"></div>
                                    
                                    <button 
                                        className="dropdown-item close-item"
                                        onClick={() => setShowDropdown(false)}
                                    >
                                        <span className="dropdown-icon">‚ùå</span>
                                        <span className="dropdown-text">–ó–∞–∫—Ä—ã—Ç—å</span>
                                    </button>
                                </div>
                            )}
                        </div>
                    )}
                </div>
            </div>

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º */}
            {showInviteModal && (
                <div className="invite-modal-overlay" onClick={closeInviteModal}>
                    <div className="invite-modal" onClick={(e) => e.stopPropagation()}>
                        <div className="modal-header">
                            <div className="modal-title">
                                <span className="modal-icon">üéâ</span>
                                <h3>–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä</h3>
                            </div>
                            <button className="modal-close" onClick={closeInviteModal}>
                                <span>√ó</span>
                            </button>
                        </div>
                        
                        <div className="modal-content">
                            <div className="server-preview">
                                <div className="server-preview-icon">
                                    {currentServer.icon ? (
                                        <img src={currentServer.icon} alt="Server icon" />
                                    ) : (
                                        <span>{currentServer.name.charAt(0).toUpperCase()}</span>
                                    )}
                                </div>
                                <div className="server-preview-info">
                                    <h4>{currentServer.name}</h4>
                                    <p>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ Discord-–ø–æ–¥–æ–±–Ω—ã–π —Å–µ—Ä–≤–µ—Ä</p>
                                </div>
                            </div>
                            
                            <div className="invite-section">
                                <label>–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:</label>
                                <div className="invite-link-container">
                                    <input 
                                        type="text" 
                                        value={inviteLink} 
                                        readOnly 
                                        className="invite-link-input"
                                        placeholder="–°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏..."
                                    />
                                    <button 
                                        onClick={copyInviteLink} 
                                        className="copy-button"
                                        title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É"
                                    >
                                        <span className="copy-icon">üìã</span>
                                        <span className="copy-text">–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å</span>
                                    </button>
                                </div>
                            </div>
                            
                            <div className="modal-footer">
                                <button onClick={closeInviteModal} className="close-button">
                                    –ì–æ—Ç–æ–≤–æ
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            )}

            {/* Tooltip –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ */}
            {showTooltip && (
                <div className="copy-tooltip" ref={tooltipRef}>
                    <span className="tooltip-icon">‚úÖ</span>
                    <span className="tooltip-text">–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!</span>
                </div>
            )}
        </>
    );
});

export default ServerHeader;
