import { reaction } from 'mobx';
import { iceServers } from '../configs/iceServers';
import { Signal } from '../types/WebRTCClient.types';
import audioSettingsStore from '../store/AudioSettingsStore';
import participantVolumeStore from '../store/ParticipantVolumeStore';
import vadService from '../services/VoiceActivityDetectionService';
class WebRTCClient {
    public sendSignal: null | ((signal: Signal) => void) = null;

    public changeState: null | ((id: string, signal: Event) => void) = null;

    private readonly remoteStreams: Map<string, MediaStream> = new Map();
    private readonly peerConnections: Map<string, RTCPeerConnection> = new Map();
    private readonly remoteAudioElements: Map<string, HTMLAudioElement> = new Map();
    private readonly audioContexts: Map<string, AudioContext> = new Map();
    private readonly gainNodes: Map<string, GainNode> = new Map();
    private readonly audioSources: Map<string, MediaStreamAudioSourceNode> = new Map();

    private localStream: MediaStream | null = null;

    private isMuteMicro = false;

    //—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ú–µ–¥–∏–∞
    public async initializeMedia() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º VAD —Å–µ—Ä–≤–∏—Å
        vadService.initialize();
        
        reaction(
            () => audioSettingsStore.stream,
            (val) => {
                console.log('üöÄ ~ WebRTCClient ~ initializeMedia ~ val:', val);
                this.resendlocalStream();
                this.setupLocalVAD();
            },
        );
    }

    //–õ–æ–≥–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    public createPeerConnection(id: string) {
        console.log('—Å–æ–∑–¥–∞–Ω–∏–µ peerConnection c id', id);
        const newPeerConnection = new RTCPeerConnection({
            iceServers: iceServers,
        });

        newPeerConnection.onicecandidate = (event) => {
            console.log(event);
            if (!event.candidate) {
                console.error('candidate –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
                return;
            }
            if (!this.sendSignal) {
                console.error('sendSignal –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
                return;
            }
            this.sendSignal({
                to: id,
                type: 'candidate',
                candidate: event.candidate,
            });
        };

        newPeerConnection.onconnectionstatechange = (state) => {
            this.changeState && this.changeState(id, state);
        };

        newPeerConnection.ontrack = (event) => {
            console.log('ontrack', id, event.track.kind);
            if (event.track.kind === 'audio') {
                this.addRemoteStream(event.track, id);
            }
        };

        this.peerConnections.set(id, newPeerConnection);
        this.addLocalStream(id);
        return newPeerConnection;
    }

    public async createOffer(id: string) {
        console.log('—Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ñ–µ—Ä–∞');
        const peerConnection = this.createPeerConnection(id);
        try {
            const offer = await peerConnection.createOffer();
            await peerConnection.setLocalDescription(offer);
            const sdp = offer.sdp;

            if (!this.sendSignal) {
                console.error('sendSignal –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Ä–∞–≤–Ω—è–µ—Ç—Å—è null');
                return;
            }

            if (!sdp) {
                console.error('offer.sdp –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Ä–∞–≤–Ω—è–µ—Ç—Å—è null');
                return;
            }

            this.sendSignal({
                to: id,
                type: 'offer',
                sdp: sdp,
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:', error);
        }
    }

    public async createAnswer(id: string) {
        console.log('—Å–æ–∑–¥–∞–Ω–∏–µ  –æ—Ç–≤–µ—Ç–∞');
        const peerConnection = this.peerConnections.get(id);
        if (!peerConnection) {
            console.error('peerConnection –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞');
            return;
        }
        try {
            const answer = await peerConnection.createAnswer();
            await peerConnection.setLocalDescription(answer);
            const sdp = answer.sdp;

            if (!this.sendSignal) {
                console.error('sendSignalr –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Ä–∞–≤–Ω—è–µ—Ç—Å—è null');
                return;
            }

            if (!sdp) {
                console.error('answer.sdp –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Ä–∞–≤–Ω—è–µ—Ç—Å—è null');
                return;
            }
            this.sendSignal({
                to: id,
                type: 'answer',
                sdp: sdp,
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞:', error);
        }
    }

    public async handleSignal(data: any) {
        const { from, type, sdp, candidate } = data;
        console.log('–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞:', type);
        let peerConnection = this.peerConnections.get(from) || false;
        if (!peerConnection) {
            peerConnection = await this.createPeerConnection(from);
        }

        switch (type) {
            case 'offer':
                await peerConnection.setRemoteDescription(new RTCSessionDescription({ type, sdp }));
                await this.createAnswer(from);
                break;
            case 'answer':
                await peerConnection.setRemoteDescription(new RTCSessionDescription({ type, sdp }));
                break;
            case 'candidate':
                await peerConnection.addIceCandidate(new RTCIceCandidate(candidate));
                break;
        }
    }

    //–ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Ç–æ–∫–∞–º–∏
    private addRemoteStream(track: any, id: string): void {
        console.log('–ø–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—Ç–æ–∫', id);
        let remoteStream = this.remoteStreams.get(id);
        if (!remoteStream) {
            remoteStream = new MediaStream();
            this.remoteStreams.set(id, remoteStream);
            console.log('–£–¥–∞–ª—ë–Ω–Ω—ã–π –ø–æ—Ç–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', id);
            
            // –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            const audioContext = new AudioContext();
            const gainNode = audioContext.createGain();
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –≥—Ä–æ–º–∫–æ—Å—Ç—å
            const initialVolume = participantVolumeStore.getParticipantVolume(id);
            gainNode.gain.value = initialVolume / 100;
            
            this.audioContexts.set(id, audioContext);
            this.gainNodes.set(id, gainNode);
            
            // –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç, –Ω–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ DOM
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞
            const audioElement = document.createElement('audio');
            audioElement.srcObject = remoteStream;
            audioElement.autoplay = true;
            audioElement.muted = true; // –í—Å–µ–≥–¥–∞ muted, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ Web Audio API
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–±—ã—Ç–∏—è loadedmetadata
            audioElement.addEventListener('loadedmetadata', () => {
                console.log('–ê—É–¥–∏–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:', id);
                // –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞—É–¥–∏–æ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                const currentStream = this.remoteStreams.get(id);
                if (currentStream && currentStream.getAudioTracks().length > 0) {
                    this.setupAudioProcessing(id, currentStream);
                }
            });
            
            // –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ DOM, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è Web Audio API
            this.remoteAudioElements.set(id, audioElement); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É
        } else {
            console.log('remoteStream –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ');
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫ –≤ –ø–æ—Ç–æ–∫
        remoteStream.addTrack(track);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞—É–¥–∏–æ —Ç—Ä–µ–∫–∏ –≤ –ø–æ—Ç–æ–∫–µ, –∏ —Ç–æ–ª—å–∫–æ —Ç–æ–≥–¥–∞ —Å–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
        if (remoteStream.getAudioTracks().length > 0 && !this.audioContexts.get(id)?.state.includes('closed')) {
            this.setupAudioProcessing(id, remoteStream);
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É–¥–∏–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
    private setupAudioProcessing(id: string, remoteStream: MediaStream): void {
        const audioContext = this.audioContexts.get(id);
        const gainNode = this.gainNodes.get(id);
        
        if (!audioContext || !gainNode) {
            console.error('AudioContext –∏–ª–∏ GainNode –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:', id);
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–Ω –ª–∏ —É–∂–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è —ç—Ç–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        if (this.audioSources.has(id)) {
            console.log('–ê—É–¥–∏–æ –∏—Å—Ç–æ—á–Ω–∏–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:', id);
            return;
        }

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Ç–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞—É–¥–∏–æ —Ç—Ä–µ–∫–∏
            if (remoteStream.getAudioTracks().length === 0) {
                console.warn('–ü–æ—Ç–æ–∫ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞—É–¥–∏–æ —Ç—Ä–µ–∫–æ–≤ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:', id);
                return;
            }

            // –°–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∞–∫—Ç–∏–≤–µ–Ω
            if (!audioContext.state.includes('closed')) {
                const source = audioContext.createMediaStreamSource(remoteStream);
                source.connect(gainNode);
                gainNode.connect(audioContext.destination);
                this.audioSources.set(id, source);
                
                // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º VAD –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
                this.setupRemoteVAD(id, remoteStream);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∞—É–¥–∏–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:', id, error);
        }
    }

    private resendlocalStream() {
        if (audioSettingsStore.stream) {
            this.peerConnections.forEach((peerConnection) => {
                const newAudioTrack = audioSettingsStore.stream.getAudioTracks()[0];
                const sender = peerConnection.getSenders().find((s) => s.track?.kind === 'audio');
                if (sender && newAudioTrack) {
                    sender.replaceTrack(newAudioTrack);
                    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ mute
                    newAudioTrack.enabled = !audioSettingsStore.isMicrophoneMuted;
                }
            });
        } 
    }

    private addLocalStream(id: string): void {
        const peerConnection = this.peerConnections.get(id);
      
        if (audioSettingsStore.stream) {
            audioSettingsStore.stream.getTracks().forEach((track) => {
                //–ï—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π —Å—Ç—Ä–∏–º –∏ –ø–∏—Ä –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ç–æ —Ä–∞—Å—Å—ã–ª–∞–µ–º —Å—Ç—Ä–∏–º
                peerConnection && peerConnection.addTrack(track, audioSettingsStore.stream);
                track.enabled = !audioSettingsStore.isMicrophoneMuted;
            });
        }
    }

    private setState(): void {}

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º mute –¥–ª—è –≤—Å–µ—Ö —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∞—É–¥–∏–æ—ç–ª–µ–º–µ–Ω—Ç–æ–≤
    public setRemoteAudioMuted(muted: boolean): void {
        this.gainNodes.forEach((gainNode, socketId) => {
            if (muted) {
                gainNode.gain.value = 0;
            } else {
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å –∏–∑ store
                const volume = participantVolumeStore.getParticipantVolume(socketId);
                gainNode.gain.value = volume / 100;
            }
        });
    }

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç—å—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    public setParticipantVolume(socketId: string, volume: number): void {
        const gainNode = this.gainNodes.get(socketId);
        if (gainNode) {
            gainNode.gain.value = volume / 100;
            participantVolumeStore.setParticipantVolume(socketId, volume);
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞
    public getParticipantVolume(socketId: string): number {
        return participantVolumeStore.getParticipantVolume(socketId);
    }

    // –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ

    // –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è
    public disconnectPeer(id: string) {
        const peerConnection = this.peerConnections.get(id);
        if (peerConnection) {
            peerConnection.close();
            this.peerConnections.delete(id);
        }

        const remoteStream = this.remoteStreams.get(id);
        if (remoteStream) {
            remoteStream.getTracks().forEach((track) => track.stop());
            this.remoteStreams.delete(id);
        }

        // –£–¥–∞–ª—è–µ–º –∞—É–¥–∏–æ—ç–ª–µ–º–µ–Ω—Ç
        const audioElement = this.remoteAudioElements.get(id);
        if (audioElement) {
            // –ù–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª—è—Ç—å –∏–∑ DOM, —Ç–∞–∫ –∫–∞–∫ –º—ã –µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏
            this.remoteAudioElements.delete(id);
        }

        // –û—á–∏—â–∞–µ–º –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ gain node
        const audioContext = this.audioContexts.get(id);
        if (audioContext) {
            audioContext.close();
            this.audioContexts.delete(id);
        }
        this.gainNodes.delete(id);
        this.audioSources.delete(id);

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º VAD –¥–ª—è —ç—Ç–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        vadService.stopMonitoring(id);

        // –£–¥–∞–ª—è–µ–º –∏–∑ store –≥—Ä–æ–º–∫–æ—Å—Ç–∏
        participantVolumeStore.removeParticipant(id);
    }
    // –∫–æ–≥–¥–∞ –º—ã —Å–∞–º–∏ –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è
    public disconect() {
        //–∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫–∏
        this.peerConnections.forEach((peerConnection) => {
            peerConnection.close();
        });
        this.peerConnections.clear();

        if (audioSettingsStore.stream) {
            audioSettingsStore.stream.getTracks().forEach((track) => track.stop());
        }

        //—Ç–æ—Ä–º–æ–∑–∏–º —Å—Ç—Ä–∏–º—ã
        this.remoteStreams.forEach((stream) => {
            stream.getTracks().forEach((track) => track.stop());
        });
        this.remoteStreams.clear();

        // –û—á–∏—â–∞–µ–º –≤—Å–µ –∞—É–¥–∏–æ—ç–ª–µ–º–µ–Ω—Ç—ã
        this.remoteAudioElements.clear();

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
        this.audioContexts.forEach((audioContext) => {
            audioContext.close();
        });
        this.audioContexts.clear();
        this.gainNodes.clear();
        this.audioSources.clear();

        // –û—á–∏—â–∞–µ–º store –≥—Ä–æ–º–∫–æ—Å—Ç–∏
        participantVolumeStore.resetAllVolumes();
        
        // –û—á–∏—â–∞–µ–º VAD —Å–µ—Ä–≤–∏—Å
        vadService.cleanup();
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ VAD –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ (–ø–æ—Å–ª–µ gain)
    private setupLocalVAD(): void {
        if (audioSettingsStore.stream) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –ø–æ—Ç–æ–∫ –ø–æ—Å–ª–µ gain –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            vadService.startMonitoring('local', audioSettingsStore.stream);
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ VAD –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    private setupRemoteVAD(userId: string, remoteStream: MediaStream): void {
        vadService.startMonitoring(userId, remoteStream);
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–µ—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    public getUserVoiceActivity(userId: string): boolean {
        return vadService.getUserActivity(userId);
    }

    // –ü–æ–ª—É—á–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    public getUserVolumeLevel(userId: string): number {
        return vadService.getUserVolume(userId);
    }
}

export default WebRTCClient;

