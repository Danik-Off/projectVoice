/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É–¥–∏–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∑–≤—É–∫–∞ –∏ —Ä–∞–±–æ—Ç—É —Ñ–∏–ª—å—Ç—Ä–æ–≤
 */

import audioSettingsStore from '../store/AudioSettingsStore';

export class AudioTest {
    private testContext: AudioContext | null = null;
    private testOscillator: OscillatorNode | null = null;
    private testGain: GainNode | null = null;

    /**
     * –¢–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –∑–≤—É–∫–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ —á–∞—Å—Ç–æ—Ç–∞–º–∏
     */
    public async testAudioQuality(): Promise<void> {
        console.log('üéµ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –∞—É–¥–∏–æ...');
        
        try {
            // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            this.testContext = new AudioContext();
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —á–∞—Å—Ç–æ—Ç—ã
            const testFrequencies = [440, 880, 1760, 3520]; // A4, A5, A6, A7
            const frequencyNames = ['A4 (440 –ì—Ü)', 'A5 (880 –ì—Ü)', 'A6 (1760 –ì—Ü)', 'A7 (3520 –ì—Ü)'];
            
            for (let i = 0; i < testFrequencies.length; i++) {
                await this.playTestTone(testFrequencies[i], frequencyNames[i]);
                await this.delay(1000); // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–æ–Ω–∞–º–∏
            }
            
            console.log('‚úÖ –¢–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –∞—É–¥–∏–æ –∑–∞–≤–µ—Ä—à–µ–Ω');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∞—É–¥–∏–æ:', error);
        } finally {
            this.cleanup();
        }
    }

    /**
     * –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–≤—É–∫–∞
     */
    public async testAudioFilters(): Promise<void> {
        console.log('üîß –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤...');
        
        try {
            this.testContext = new AudioContext();
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
            await this.testHighPassFilter();
            await this.delay(500);
            await this.testLowPassFilter();
            await this.delay(500);
            await this.testBandPassFilter();
            
            console.log('‚úÖ –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤:', error);
        } finally {
            this.cleanup();
        }
    }

    /**
     * –¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
     */
    public testDefaultSettings(): void {
        console.log('‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...');
        
        const settings = {
            sampleRate: audioSettingsStore.sampleRate,
            bitrate: audioSettingsStore.bitrate,
            latency: audioSettingsStore.latency,
            volume: audioSettingsStore.volume,
            echoCancellation: audioSettingsStore.echoCancellation,
            noiseSuppression: audioSettingsStore.noiseSuppression,
            autoGainControl: audioSettingsStore.autoGainControl,
            voiceEnhancement: audioSettingsStore.voiceEnhancement,
            voiceClarity: audioSettingsStore.voiceClarity,
            backgroundNoiseReduction: audioSettingsStore.backgroundNoiseReduction,
            voiceBoost: audioSettingsStore.voiceBoost,
            bassBoost: audioSettingsStore.bassBoost,
            trebleBoost: audioSettingsStore.trebleBoost,
            dynamicRangeCompression: audioSettingsStore.dynamicRangeCompression
        };

        console.log('üìä –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', settings);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫
        const checks = [
            { name: '–ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏', value: settings.sampleRate, min: 8000, max: 48000 },
            { name: '–ë–∏—Ç—Ä–µ–π—Ç', value: settings.bitrate, min: 64, max: 320 },
            { name: '–ó–∞–¥–µ—Ä–∂–∫–∞', value: settings.latency, min: 50, max: 1000 },
            { name: '–ì—Ä–æ–º–∫–æ—Å—Ç—å', value: settings.volume, min: 0, max: 100 },
            { name: '–ß–µ—Ç–∫–æ—Å—Ç—å –≥–æ–ª–æ—Å–∞', value: settings.voiceClarity * 100, min: 0, max: 100 },
            { name: '–°–Ω–∏–∂–µ–Ω–∏–µ —à—É–º–∞', value: settings.backgroundNoiseReduction * 100, min: 0, max: 100 },
            { name: '–£—Å–∏–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–∞', value: settings.voiceBoost * 100, min: 0, max: 100 },
            { name: '–£—Å–∏–ª–µ–Ω–∏–µ –±–∞—Å–æ–≤', value: settings.bassBoost * 100, min: 0, max: 100 },
            { name: '–£—Å–∏–ª–µ–Ω–∏–µ –≤—ã—Å–æ–∫–∏—Ö', value: settings.trebleBoost * 100, min: 0, max: 100 },
            { name: '–î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Å–∂–∞—Ç–∏–µ', value: settings.dynamicRangeCompression * 100, min: 0, max: 100 }
        ];

        let allGood = true;
        checks.forEach(check => {
            if (check.value < check.min || check.value > check.max) {
                console.warn(`‚ö†Ô∏è ${check.name}: ${check.value} (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å ${check.min}-${check.max})`);
                allGood = false;
            } else {
                console.log(`‚úÖ ${check.name}: ${check.value}`);
            }
        });

        if (allGood) {
            console.log('‚úÖ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã');
        } else {
            console.log('‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö');
        }
    }

    /**
     * –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–æ–Ω–∞
     */
    private async playTestTone(frequency: number, name: string): Promise<void> {
        return new Promise((resolve) => {
            if (!this.testContext) return resolve();

            console.log(`üéµ –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º ${name}...`);
            
            this.testOscillator = this.testContext.createOscillator();
            this.testGain = this.testContext.createGain();
            
            this.testOscillator.frequency.value = frequency;
            this.testOscillator.type = 'sine';
            
            this.testGain.gain.value = 0.1; // –ù–∏–∑–∫–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å –¥–ª—è —Ç–µ—Å—Ç–∞
            
            this.testOscillator.connect(this.testGain);
            this.testGain.connect(this.testContext.destination);
            
            this.testOscillator.start();
            
            setTimeout(() => {
                if (this.testOscillator) {
                    this.testOscillator.stop();
                }
                resolve();
            }, 800);
        });
    }

    /**
     * –¢–µ—Å—Ç –≤—ã—Å–æ–∫–æ—á–∞—Å—Ç–æ—Ç–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
     */
    private async testHighPassFilter(): Promise<void> {
        return new Promise((resolve) => {
            if (!this.testContext) return resolve();

            console.log('üîä –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã—Å–æ–∫–æ—á–∞—Å—Ç–æ—Ç–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä...');
            
            const oscillator = this.testContext.createOscillator();
            const filter = this.testContext.createBiquadFilter();
            const gain = this.testContext.createGain();
            
            oscillator.frequency.value = 200; // –ù–∏–∑–∫–∞—è —á–∞—Å—Ç–æ—Ç–∞
            oscillator.type = 'sine';
            
            filter.type = 'highpass';
            filter.frequency.value = 300;
            filter.Q.value = 0.5;
            
            gain.gain.value = 0.1;
            
            oscillator.connect(filter);
            filter.connect(gain);
            gain.connect(this.testContext.destination);
            
            oscillator.start();
            
            setTimeout(() => {
                oscillator.stop();
                resolve();
            }, 500);
        });
    }

    /**
     * –¢–µ—Å—Ç –Ω–∏–∑–∫–æ—á–∞—Å—Ç–æ—Ç–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
     */
    private async testLowPassFilter(): Promise<void> {
        return new Promise((resolve) => {
            if (!this.testContext) return resolve();

            console.log('üîá –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∏–∑–∫–æ—á–∞—Å—Ç–æ—Ç–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä...');
            
            const oscillator = this.testContext.createOscillator();
            const filter = this.testContext.createBiquadFilter();
            const gain = this.testContext.createGain();
            
            oscillator.frequency.value = 5000; // –í—ã—Å–æ–∫–∞—è —á–∞—Å—Ç–æ—Ç–∞
            oscillator.type = 'sine';
            
            filter.type = 'lowpass';
            filter.frequency.value = 3000;
            filter.Q.value = 0.5;
            
            gain.gain.value = 0.1;
            
            oscillator.connect(filter);
            filter.connect(gain);
            gain.connect(this.testContext.destination);
            
            oscillator.start();
            
            setTimeout(() => {
                oscillator.stop();
                resolve();
            }, 500);
        });
    }

    /**
     * –¢–µ—Å—Ç –ø–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
     */
    private async testBandPassFilter(): Promise<void> {
        return new Promise((resolve) => {
            if (!this.testContext) return resolve();

            console.log('üéõÔ∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∏–ª—å—Ç—Ä...');
            
            const oscillator = this.testContext.createOscillator();
            const filter = this.testContext.createBiquadFilter();
            const gain = this.testContext.createGain();
            
            oscillator.frequency.value = 1000; // –°—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç–æ—Ç–∞
            oscillator.type = 'sine';
            
            filter.type = 'bandpass';
            filter.frequency.value = 1200;
            filter.Q.value = 1.2;
            
            gain.gain.value = 0.1;
            
            oscillator.connect(filter);
            filter.connect(gain);
            gain.connect(this.testContext.destination);
            
            oscillator.start();
            
            setTimeout(() => {
                oscillator.stop();
                resolve();
            }, 500);
        });
    }

    /**
     * –ó–∞–¥–µ—Ä–∂–∫–∞
     */
    private delay(ms: number): Promise<void> {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    private cleanup(): void {
        if (this.testOscillator) {
            this.testOscillator.stop();
            this.testOscillator = null;
        }
        
        if (this.testContext && this.testContext.state !== 'closed') {
            this.testContext.close();
            this.testContext = null;
        }
        
        this.testGain = null;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export const audioTest = new AudioTest();
